#!/usr/bin/env python
# coding: utf-8
"""Generating crontab entries by analyzing data from nodes about their load"""

import sys
import pandas as pd

crontab_line = '%d * * * * %s %s %s # autogenerated web-server switcher'
preemption = 8 # switching time in minutes 

def join_tables(files):
    """Combining time tables with node load data by timestamps"""
    df = pd.DataFrame()

    for file in files:
        errors = pd.read_csv(file)
        name = errors.columns[1]
        errors = errors[errors.columns[1]].values.tolist()
        df[name] = errors
    return df

def select_server(row):
    """Getting the name of server from the table's header"""
    for column in row.keys():
        if row[column] == 0:
            return column

def get_crontab(df, cmd):
    """Generating crontab entries"""
    crontab = []
    cur = None

    for min in df.index:
        srv = df.iloc[min]['server']
        if srv != cur:
            if cur:
                t = min - preemption
                if t < 0:
                    t = 60 + t
                if srv:
                    crontab.append(crontab_line % (t, cmd, cur, srv))
            cur = srv

    return crontab

def main():
    import sys
    
    if len(sys.argv) < 4:
        print("Usage: %s switch_cmd time_table1.csv time_table2.csv..." % sys.argv[0])
        sys.exit(-1)

    cmd = sys.argv[1]

    df = join_tables(sys.argv[2:])  
    df['server'] = df.apply(select_server, axis=1)
    df.to_csv('~/2switch.csv')
    ctab = get_crontab(df, cmd)
    if len(ctab):
        list(map(lambda s: print(s), ctab))
    else:
        sys.exit(-1)

if __name__ == '__main__':
    main()
